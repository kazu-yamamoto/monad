* はじめに
	map 分かる人には分かるよ
	おもちゃのレゴと一緒だよ

	実行順序が決まらない
	副作用がないのにゲームは作れるの？

* リスト
	map, concat, concatMap
	++
	融合

* 代数データ型 (簡潔な記号が大事。直感的手法の言葉)
	すごすぎる
		http://d.hatena.ne.jp/kazu-yamamoto/20080902/1220323632
	差分アップデート
	抽象データ型
	: で始まるデーター構成子
		Exp を定義する！
		http://d.hatena.ne.jp/kazu-yamamoto/20090204/1233732939
	リストの秘密 []

* 型クラスと多相性
	Bool, Maybe ...
	Num ...
		http://d.hatena.ne.jp/kazu-yamamoto/20091116/1258357568

	多層性の話
		http://d.hatena.ne.jp/kazu-yamamoto/20081024/1224819961

* APIのひみつ
	return, <*>, >>=
	Functor 則
	融合
		fmap (g . h) = fmap g . fmap h
	再帰
		sequence

	<*> よりも >>= の方が強い
	http://d.hatena.ne.jp/kazu-yamamoto/20100526/1274837088

* Monad

	do の秘密
		if の秘密
	Monad則の秘密
		http://d.hatena.ne.jp/kazu-yamamoto/20090706/1246850844
		f は関数だよ
		http://d.hatena.ne.jp/kazu-yamamoto/20081203/1228288529
	偽Monad
		http://d.hatena.ne.jp/itto100pen/20090710
		http://d.hatena.ne.jp/itto100pen/20090707
	when と unless
	走らせる
		http://blog.sigfpe.com/2007/04/trivial-monad.html

	実行順序
		http://d.hatena.ne.jp/kazu-yamamoto/20090918/1253243061
		遅延 IO

* Identity Monad

* Maybe Monad
	do だとしっくり来ない
	パターンガードだと Good

* リスト Monad (リストがMonadだと言ったら驚くでしょうか？ Monadのすべて)
	リスト内包表記
	ガード
		http://d.hatena.ne.jp/kazu-yamamoto/20090313/1236935179
		http://d.hatena.ne.jp/kazu-yamamoto/20090401/1238555013

	三平方の定理
	経路探索
		http://d.hatena.ne.jp/kazu-yamamoto/20100527/1274925294
		Nondeterministic.hs

* IO Monad
	魔術的なMonad
	World
		http://d.hatena.ne.jp/kazu-yamamoto/20080214/1202985197
	ファーストクラスとしての IO
		 http://d.hatena.ne.jp/kazu-yamamoto/20090603/1244010880
		 http://d.hatena.ne.jp/kazu-yamamoto/20090415/1239795729
	IORef
	getOpt
		暗黙の引数
		http://d.hatena.ne.jp/kazu-yamamoto/20090527/1243411433
		http://d.hatena.ne.jp/kazu-yamamoto/20090107/1231318138
	catch, throw, finally と EitherT

* Reader Monad
	(->)
	Reader Monad は B,S,K,W。
	Haskell Curry が発見したのは B,C,K,W。

* Writer Monad
	http://blog.livedoor.jp/nonowarn/?p=2
	==>

* State Monad
  	仲間のまとめ
	  	http://d.hatena.ne.jp/kazu-yamamoto/20080604/1212573964
		http://d.hatena.ne.jp/kazu-yamamoto/20090826/1251258560
	State
	スタックマシンの実装 (Exp の評価、src/State.hs)
		疑似乱数はダメ
			http://d.hatena.ne.jp/kazu-yamamoto/20080618/1213779212
		式を評価してみる
			eval じゃなくて run!

* Alternative と MonadPlus

掛け算                足し算
(*),1                 (+), 0

Applicative           Alternative
<*>, pure             <|>, empty
ap,[x]                (++), []

(f:fs) <*> xs = f <$> xs ++ fs <*> xs

Monad                 MonadPlus
>>=, return           mplus, mzero
concatMap, [x]        (++), []


* パーサー
	http://d.hatena.ne.jp/kazu-yamamoto/20080920/1221881130
	http://d.hatena.ne.jp/kazu-yamamoto/20081201/1228115457
	(<|>) = mplus

* Parsec 1
	CVS とパースしてみる
	式をパースしてみる

* Parsec 2
	シンボルテーブルを作ってみる

* Applicative スタイル
	<$> と乱数
	Parsec

* 共通の API の効用
	http://d.hatena.ne.jp/kazu-yamamoto/20100526/1274837088
	MonadicParser.hs


* Monad変換子
	[] と StateT の合成
	IO と ReaderT の合成
	Binary と StateT の合成


